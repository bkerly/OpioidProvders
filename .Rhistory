select(OTPName,lon,lat)
#Preparing the OTP dataframe
OTPDst <- OTPs %>%
mutate(OTPName = paste('Program Name',DBA,sep="")) %>%
select(OTPName,lon,lat)
DeathsToOTPTime <- osrmTable(src = DeathsSRC,
dst = OTPDst)
nrow(OTPDst)
nrow(DeathsSRC)
25*2139
DeathsToOTPTime <- osrmTable(src = head(DeathsSRC,50),
dst = OTPDst)
View(DeathsToOTPTime)
DeathsToOTPTime[["durations"]]
install.packages("geosphere")
library(geosphere)
install.packages("geosphere")
install.packages("geosphere")
library("geosphere")
#Calculating the linear distance between each death and OTP
distm(DeathsSRC[1],OPTDst[1])
DeathsSRC[1,2]
#Calculating the linear distance between each death and OTP
distm(c(DeathsSRC[1,2],DeathsSRC[1,3]),c(OPTDst[1,2],OTPDst[1,3])
)
#Calculating the linear distance between each death and OTP
distm(c(DeathsSRC[1,2],DeathsSRC[1,3]),c(OTPDst[1,2],OTPDst[1,3]))
DeathsSRC[1,2]
DeathsSRC[1,3]
OTPDst[1,2]
OTPDst[1,3]
#Calculating the linear distance between each death and OTP
distm(c(DeathsSRC[1,2],DeathsSRC[1,3]),c(OTPDst[1,2],OTPDst[1,3]),fun=distHaversine)
#Preparing the OTP dataframe
OTPDst <- OTPs %>%
mutate(OTPName = paste('Program Name',DBA,sep="")) %>%
select(OTPName,lon,lat) %>%
as.data.frame()
#Calculating the linear distance between each death and OTP
distm(c(DeathsSRC[1,2],DeathsSRC[1,3]),c(OTPDst[1,2],OTPDst[1,3]),fun=distHaversine)
LinDistDeathOPT[i] <- as.data.frame(
c(),
c()
)
LinDistDeathOPT <- as.data.frame(
c(),
c()
)
LinDistDeathOPT <- as.data.frame(
DeathLocation = c(),
OTPLocation = c(),
Distance = c()
)
LinDistDeathOPT <- as.data.frame(
DeathLocation = c(""),
OTPLocation = c(""),
Distance = c("")
)
LinDistDeathOPT <- as.data.frame(
DeathLocation = character(),
OTPLocation = character()
Distance = numeric()
)
LinDistDeathOPT <- as.data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
LinDistDeathOPT <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOPT[i+J-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
}
LinDistDeathOPT <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
}
warnings()
View(LinDistDeathOTP)
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
#Clean the canvas
remove(list = ls())
#Set WD to the location of the script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the relevant libraries - do this every time
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(ggmap)
library(osmdata)
library(sf)
library(spData)
library(lwgeom)
library(tidycensus)
library(RColorBrewer)
library(osrm)
library(geosphere)
###Get centroid of all the census tracts----
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
#Get centroid of each census tract
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
CTCoords <- do.call(rbind, st_geometry(co18$centroids)) %>%
as.data.frame() %>%
`colnames<-`(c("lon","lat"))
CTCoords <- bind_cols(co17,CTCoords,id=NULL) %>%
select("GEOID","lat","lon")
###Load the data and prepreocess it a bit----
#Load in death data by census tract
deaths <- read_csv("Data/co_opioid_death_1418.csv")
deaths$d <- ifelse(deaths$d == ".",1,deaths$d)
deaths$d <- as.numeric(deaths$d)
#Bind with census tract centroid location to generate approximate lat/long
deaths <- left_join(deaths,CTCoords,by=c("tractid"="GEOID")) %>%
as.data.frame() %>%
select("tractid","d","lat","lon") %>%
filter(nchar(tractid)>10)
#Add in weightings for deaths (so that if there are two deaths, now there are two rows)
deaths2 <- with(deaths, deaths[rep(1:nrow(deaths), d),]) %>%
select(-d)
#Load data about the location of DATA providers
DATAproviders <- read_csv("Data/ColoradoDATAProvidersGeoTagged.csv")
#Load data about the location of OTP
OTPs <- read_csv("Data/ColoradoOTPGeoTagged.csv")
###Prepare for mapping---
#Define some colors
DATA_Provider_Locations = "#011f4b"
OTP_Locations = "#6497b1"
Death_Locations = "#b3cde0"
col4 = "#CC0000"
#Google map Api
ggmap::register_google(key = "AIzaSyD5w9yNOufvfRxcdGX0TlTZV6nIU63vTEk")
###Determining travel times---
#Preparing the death dataframe
DeathsSRC <- deaths2 %>%
select(tractid,lon,lat)
#Preparing the OTP dataframe
OTPDst <- OTPs %>%
mutate(OTPName = paste('Program Name',DBA,sep="")) %>%
select(OTPName,lon,lat) %>%
as.data.frame()
#Calculating the linear distance between each death and OTP
distm(c(DeathsSRC[1,2],DeathsSRC[1,3]),c(OTPDst[1,2],OTPDst[1,3]),fun=distHaversine)
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
Distance = numeric()
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
cat(paste0(round(i / n * 100), '% completed'))
Sys.sleep(.005)
if (i == n) cat(': Done')
else cat('\014')
}
}
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
cat(paste0(round(i / n * 100), '% completed'))
Sys.sleep(.005)
if (i == n) cat(': Done')
else cat('\014')
}
}
n <- 100
for (ii in 1:n) {
width <- options()$width
cat(paste0(rep('=', ii / n * width), collapse = ''))
Sys.sleep(.05)
if (ii == n) cat('\014Done')
else cat('\014')
}
n<-nrow(DeathsSRC)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
cat(paste0(round(i / n * 100), '% completed'))
Sys.sleep(.005)
if (i == n) cat(': Done')
else cat('\014')
}
}
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
cat(paste0(round(i / n * 100), '% completed'))
if (i == n) cat(': Done')
else cat('\014')
}
}
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- DeathsSRC[i,1]
LinDistDeathOTP[i+j-1,2] <- OTPDst[j,1]
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Progress bar!
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
}
View(LinDistDeathOTP)
#Loop through each death and each OTP to find the linear distance betwewen them
##Create and empty destination dataframe
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
DistanceM = numeric()
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
}
warnings()
#Loop through each death and each OTP to find the linear distance betwewen them
##Create and empty destination dataframe
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
DistanceM = numeric(),
stringsAsFactors = FALSE
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
group_by(DeathLocation) %>%
arrange(DistanceM) %>%
top_n(5) %>%
ungroup()
NearestOTPs <- LinDistDeathOTP %>%
group_by(DeathLocation) %>%
arrange(DistanceM) %>%
top_n(5)
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
group_by(DeathLocation) %>%
top_n(5, DistanceM) %>%
ungroup()
View(NearestOTPs)
OTPDst[1,2]
OTPDst[2,2]
OTPDst[5,2]
OTPDst[1,1]
OTPDst[2,1]
OTPDst[3,1]
View(OTPDst)
#Preparing the OTP dataframe
OTPDst <- OTPs %>%
mutate(OTPName = paste(Program Name,DBA,sep="")) %>%
select(OTPName,lon,lat) %>%
as.data.frame()
colnames(OTPs)[2] <- "ProgranName"
colnames(OTPs)[2] <- "ProgramName"
#Preparing the OTP dataframe
OTPDst <- OTPs %>%
mutate(OTPName = paste(ProgramName,DBA,sep="")) %>%
select(OTPName,lon,lat) %>%
as.data.frame()
View(OTPDst)
#Set up the length of the progress bar
n<-nrow(DeathsSRC)
#Loop through each death and each OTP to find the linear distance betwewen them
##Create and empty destination dataframe
LinDistDeathOTP <- data.frame(
DeathLocation = character(),
OTPLocation = character(),
DistanceM = numeric(),
stringsAsFactors = FALSE
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
group_by(DeathLocation) %>%
top_n(5, DistanceM) %>%
ungroup()
#Loop through each death and each OTP to find the linear distance betwewen them
##Create and empty destination dataframe
LinDistDeathOTP <- data.frame(
DeathTractID = character(),
OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('Done')
}
}
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('Done')
else cat('\014')
}
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathLocation) %>%
slice(1:5)
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathTractID) %>%
slice(1:5)
View(NearestOTPs)
View(LinDistDeathOTP)
as.character(DeathsSRC[1,1])
as.character(DeathsSRC[2,1])
as.character(OTPDst[1,1])
as.character(OTPDst[2,1])
LinDistDeathOTP[1+1-1,1]
LinDistDeathOTP[1+2-1,1]
LinDistDeathOTP[1+1-1,2]
LinDistDeathOTP[1+2-1,2]
LinDistDeathOTP[1+3-1,1]
i=1
j=1
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
as.character(OTPDst[j,1])
j=2
as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,2]
i=1
for(j in 1:nrow(OTPDst)){
df[i,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
(DeathsSRC[1,1])
df[i,1] <- as.character(DeathsSRC[i,1])
for(i in 1:nrow(DeathsSRC)){
#Create a new empty data frame for each death location
df <- data.frame(
DeathTractID = character(),
OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
#Fill it up with all the OTP locations for that single location
for(j in 1:nrow(OTPDst)){
df[i,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
#And then add it to the results dataframe
LinDistDeathOTP <- bind_rows(LinDistDeathOTP,df)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
View(LinDistDeathOTP)
table(LinDistDeath$DeathTractID)
table(LinDistDeathOTP$DeathTractID)
for(i in 1:nrow(DeathsSRC)){
#Create a new empty data frame for each death location
df <- data.frame(
DeathTractID = character(),
OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
#Fill it up with all the OTP locations for that single location
for(j in 1:nrow(OTPDst)){
df[j,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
#And then add it to the results dataframe
LinDistDeathOTP <- bind_rows(LinDistDeathOTP,df)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
Sys.sleep(.005)
if (i == n) cat('\014Done')
else cat('\014')
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathTractID) %>%
slice(1:5)
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("Death Location" = "tractid")) %>%
left_join(OTPName,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
View(NearestOTPs)
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("Death Location" = "tractid"))
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPName,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPDst,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPDst,by="OTPName")
