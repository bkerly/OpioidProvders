OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('Done')
}
}
for(i in 1:nrow(DeathsSRC)){
for(j in 1:nrow(OTPDst)){
LinDistDeathOTP[i+j-1,1] <- as.character(DeathsSRC[i,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('Done')
else cat('\014')
}
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathLocation) %>%
slice(1:5)
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathTractID) %>%
slice(1:5)
View(NearestOTPs)
View(LinDistDeathOTP)
as.character(DeathsSRC[1,1])
as.character(DeathsSRC[2,1])
as.character(OTPDst[1,1])
as.character(OTPDst[2,1])
LinDistDeathOTP[1+1-1,1]
LinDistDeathOTP[1+2-1,1]
LinDistDeathOTP[1+1-1,2]
LinDistDeathOTP[1+2-1,2]
LinDistDeathOTP[1+3-1,1]
i=1
j=1
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
as.character(OTPDst[j,1])
j=2
as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,2] <- as.character(OTPDst[j,1])
LinDistDeathOTP[i+j-1,2]
i=1
for(j in 1:nrow(OTPDst)){
df[i,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
(DeathsSRC[1,1])
df[i,1] <- as.character(DeathsSRC[i,1])
for(i in 1:nrow(DeathsSRC)){
#Create a new empty data frame for each death location
df <- data.frame(
DeathTractID = character(),
OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
#Fill it up with all the OTP locations for that single location
for(j in 1:nrow(OTPDst)){
df[i,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j-1,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
#And then add it to the results dataframe
LinDistDeathOTP <- bind_rows(LinDistDeathOTP,df)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
if (i == n) cat('\014Done')
else cat('\014')
}
View(LinDistDeathOTP)
table(LinDistDeath$DeathTractID)
table(LinDistDeathOTP$DeathTractID)
for(i in 1:nrow(DeathsSRC)){
#Create a new empty data frame for each death location
df <- data.frame(
DeathTractID = character(),
OTPName = character(),
Distance = numeric(),
stringsAsFactors = FALSE
)
#Fill it up with all the OTP locations for that single location
for(j in 1:nrow(OTPDst)){
df[j,1] <- as.character(DeathsSRC[i,1])
df[j,2] <- as.character(OTPDst[j,1])
df[j,3] <-
distm(c(DeathsSRC[i,2],DeathsSRC[i,3]),c(OTPDst[j,2],OTPDst[j,3]),fun=distHaversine)
}
#And then add it to the results dataframe
LinDistDeathOTP <- bind_rows(LinDistDeathOTP,df)
#Flickery progress bar!
cat(paste0(round(i / n * 100), '% completed'))
width <- options()$width
cat(paste0(rep('=', i / n * width), collapse = ''))
Sys.sleep(.005)
if (i == n) cat('\014Done')
else cat('\014')
}
#For each Death, pick the nearest 5 OTP
NearestOTPs <- LinDistDeathOTP %>%
arrange(desc(Distance)) %>%
group_by(DeathTractID) %>%
slice(1:5)
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("Death Location" = "tractid")) %>%
left_join(OTPName,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
View(NearestOTPs)
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("Death Location" = "tractid"))
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPName,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
#Rejoin in the lon and lat of the deaths and OTPs
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPDst,by="OTPName") %>%
`colnames<-`(DeathTractID,OTPName,Distance,DeathLon,DeathLat,OTPLon,OTPLat)
NearestOTPs <- left_join(NearestOTPs,DeathsSRC,
by=c("DeathTractID" = "tractid")) %>%
left_join(OTPDst,by="OTPName")
#Set WD to the location of the script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Clean the canvas
remove(list = ls())
#Set WD to the location of the script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the relevant libraries - do this every time
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(ggmap)
library(osmdata)
library(sf)
library(spData)
library(lwgeom)
library(tidycensus)
library(RColorBrewer)
library(osrm)
library(geosphere)
OTPLocations <- read_csv("Data/ColoradoOTPGeoTagged.csv",
col_types = cols(lat_max = col_skip(),
lat_min = col_skip(), lon_max = col_skip(),
lon_min = col_skip()))
DWPLocations <- read_csv("Data/ColoradoDATAProvidersGeoTagged.csv",
col_types = cols(Deg. = col_factor(levels = c("MD",
"DO", "NP", "PA")), X1 = col_skip(),
lat_max = col_skip(), lat_min = col_skip(),
lon_max = col_skip(), lon_min = col_skip()))
m <- get_stamenmap(getbb("Colorado"),source="stamen",maptype = "toner",zoom=7)
ggmap(m) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"))
OTPLocations <- read_csv("Data/ColoradoOTPGeoTagged.csv",
col_types = cols(X1 = col_skip(),
lat_max = col_skip(),
lat_min = col_skip(), lon_max = col_skip(),
lon_min = col_skip()))
DWPLocations <- read_csv("Data/ColoradoDATAProvidersGeoTagged.csv",
col_types = cols(Deg. = col_factor(levels = c("MD",
"DO", "NP", "PA")), X1 = col_skip(),
lat_max = col_skip(), lat_min = col_skip(),
lon_max = col_skip(), lon_min = col_skip()))
m <- get_stamenmap(getbb("Colorado"),source="stamen",maptype = "toner",zoom=7)
ggmap(m) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"))
ggmap(m) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"))+
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = Deg.,shape=Deg.))
ggmap(m) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3)+
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = Deg.,shape=Deg.,size=3))
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = Deg.,shape=Deg.,size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3)
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_color(guide=FALSE)+
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE)
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_color_discrete(guide=FALSE)+
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE)
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE)
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE) +
labs(color = "MAT Type")
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3)) +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE) +
labs(color = "MAT Type") +
scale_color_discrete(labels = c("OTP", "DWP"))
ggmap(m) +
geom_point(data=DWPLocations, aes(x=lon, y=lat, alpha = 1, color = "Green",size=3),position="jitter") +
geom_point(data=OTPLocations, aes(x=lon, y=lat, alpha = 1, color = "Black"),size=3) +
scale_alpha(guide=FALSE)+
scale_size(guide=FALSE) +
labs(color = "MAT Type") +
scale_color_discrete(labels = c("OTP", "DWP"))
library(spData)
library(lwgeom)
library(tidycensus)
library(sf)
library(dplyr)
#OK so this first part is all just fluff to create fake
#OD locations.  I am sure there is a better way, but
#just deal with it
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
#Pick random census tract for OD locations for now
p<-co18[c(5,18,343),]
#Now that we have some OD locations (p) the code actually begins
#First we'll find the closest service location to each OD
#Convert to Geographic Object
docs<-read.csv("/Users/ktsabin/Desktop/Brian Stuff/SalishRG/Opioid Provider Mapping/OpioidProvders/ColoradoOTPGeoTagged.csv")
docs2<-docs[,c(2:3,11:12)]%>%distinct()
docs3<-docs2[complete.cases(docs2),]
docs4 <- st_as_sf(docs3, coords = c("lon", "lat"), crs = 4326)
docs4$centroids <- st_transform(docs4, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%  st_geometry()
#Distance from Each OD to Nearest service location
docs5<-as.data.frame(st_distance(p$centroids,docs4$centroids))
#Minimum Distance to service location from each OD
docs6<-docs5%>%mutate(y=apply(docs5, 1, FUN=min))%>%select(y)
#Now we will find the distance from each OD to each census tract and identify which
#census tract will shrink the total distance the most
#1. Getting Census Tract and Finding Coordinates of Centroid
#2. Calculating distance from each census tract to each OD locations
#3. Fugly Loop: for each census tract find the closest service location to each OD if the CT had a service location
#4. Finding the census tract that would minimize the sum distance for all the OD
#Getting Geography
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
#Get centroid of each census tract
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
#Some loops (because I am bad at R) to determine the shortest distanct
#to a service location from each OD.  Each loop pretends like our new
#location is in a different census tract
q<-as.data.frame(st_distance(co18$centroids,p$centroids))
ND<-1
for (l1 in 1:nrow(q)) {
for (l2 in 1:ncol(q)){
q[l1,l2]<-min(as.numeric(q[l1,l2]),docs6[l2,])
}
ND[l1]<-sum(t(q[l1,]),rm.na=TRUE)
}
#Comparing Distances with and without a new location
q$Original_Distance<-sum(docs6$y,rm.na=TRUE)
q$New_Distance<-ND
q$Time_Saved<-(q$Original_Distance-q$New_Distance)/ncol(q)
#Picking the location with the minmum sum distance.  I guess we could do median too
#if we preferred
out<-q%>% cbind(as.data.frame(co17[,c(1:2,4)]))%>%
filter(New_Distance==min(New_Distance))
paste("Best Census Tract for New Location:", out$GEOID,
"Average Distance Saved:", round(out$Time_Saved),"m.........Wow!")
#Expected result: "Best Census Tract for New Location: 08015000200 Average Distance Saved: 23385 m.........Wow!"
library(spData)
library(lwgeom)
library(tidycensus)
library(sf)
library(dplyr)
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
options(tigris_use_cache = TRUE)
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
#Pick random census tract for OD locations for now
p<-co18[c(5,18,343),]
docs<-read.csv("/Users/ktsabin/Desktop/Brian Stuff/SalishRG/Opioid Provider Mapping/OpioidProvders/ColoradoOTPGeoTagged.csv")
docs2<-docs[,c(2:3,11:12)]%>%distinct()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(spData)
library(lwgeom)
library(tidycensus)
library(sf)
library(dplyr)
options(tigris_use_cache = TRUE)
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
#Pick random census tract for OD locations for now
p<-co18[c(5,18,343),]
docs<-read.csv("Data/ColoradoOTPGeoTagged.csv")
docs2<-docs[,c(2:3,11:12)]%>%distinct()
docs3<-docs2[complete.cases(docs2),]
docs4 <- st_as_sf(docs3, coords = c("lon", "lat"), crs = 4326)
docs4$centroids <- st_transform(docs4, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%  st_geometry()
docs5<-as.data.frame(st_distance(p$centroids,docs4$centroids))
docs6<-docs5%>%mutate(y=apply(docs5, 1, FUN=min))%>%select(y)
#Getting Geography
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
co17 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
#Get centroid of each census tract
co18<-(co17[,6])
co18$centroids <- st_transform(co18, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
q<-as.data.frame(st_distance(co18$centroids,p$centroids))
ND<-1
for (l1 in 1:nrow(q)) {
for (l2 in 1:ncol(q)){
q[l1,l2]<-min(as.numeric(q[l1,l2]),docs6[l2,])
}
ND[l1]<-sum(t(q[l1,]),rm.na=TRUE)
}
#Comparing Distances with and without a new location
q$Original_Distance<-sum(docs6$y,rm.na=TRUE)
q$New_Distance<-ND
q$Time_Saved<-(q$Original_Distance-q$New_Distance)/ncol(q)
#Picking the location with the minmum sum distance.  I guess we could do median too
#if we preferred
out<-q%>% cbind(as.data.frame(co17[,c(1:2,4)]))%>%
filter(New_Distance==min(New_Distance))
paste("Best Census Tract for New Location:", out$GEOID,
"Average Distance Saved:", round(out$Time_Saved),"m.........Wow!")
#Expected result: "Best Census Tract for New Location: 08015000200 Average Distance Saved: 23385 m.........Wow!"
View(co18)
View(p)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidycensus)
library(sf)
library(dplyr)
library(osrm)
library(usmap)
library(ggplot2)
#Getting Geography (Centroid) of all Census Tracts
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
geo1 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
geo2<-(geo1[,c(1,6)])
geo2$centroids <- st_transform(geo2$geometry, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
geo3<-as.data.frame(geo2[,3])[,1:2]
geo4<-data.frame(matrix(unlist(geo3[1]), nrow=nrow(geo3), byrow=T))%>%
cbind(data.frame(matrix(unlist(as.data.frame(geo2[,1])[,1:2][1]), nrow=nrow(geo2), byrow=T)))%>%
rename(id=3)
dths<-read.csv("Data/co_opioid_death_1418.csv")
dths<-read.csv("Data\co_opioid_death_1418.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidycensus)
library(sf)
library(dplyr)
library(osrm)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidycensus)
library(sf)
library(dplyr)
library(osrm)
library(usmap)
library(ggplot2)
getwd()
#Getting Geography (Centroid) of all Census Tracts
census_api_key("efb75012a4507416a09b0fbd0c90b9b2b4582632")
geo1 <- get_acs(geography = "tract",
variables = c(totpop="B03002_001"),
state = "CO", year=2017, geometry = TRUE)
geo2<-(geo1[,c(1,6)])
geo2$centroids <- st_transform(geo2$geometry, 29101) %>%
st_centroid() %>% st_transform(., '+proj=longlat +ellps=GRS80 +no_defs') %>%
st_geometry()
geo3<-as.data.frame(geo2[,3])[,1:2]
geo4<-data.frame(matrix(unlist(geo3[1]), nrow=nrow(geo3), byrow=T))%>%
cbind(data.frame(matrix(unlist(as.data.frame(geo2[,1])[,1:2][1]), nrow=nrow(geo2), byrow=T)))%>%
rename(id=3)
dths<-read.csv("Data/co_opioid_death_1418.csv")
dths$GEOID<-paste("0",as.character(dths$GEOID),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
dthloc<-as.data.frame(dths2[,6])[,1:2]
dthloc2<-data.frame(matrix(unlist(dthloc[1]), nrow=nrow(dthloc), byrow=T))
dthloc2$id<-dths2$GEOID
deathcount<-nrow(dths2) #Indicator for Number of Records
dths<-read.csv("Data/co_opioid_death_1418.csv")
dths$GEOID<-paste("0",as.character(dths$GEOID),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
View(dths)
dths$GEOID<-paste("0",as.character(dths$tractid),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
dths<-read.csv("Data/co_opioid_death_1418.csv")
dths$GEOID<-paste("0",as.character(dths$tractid),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
dths2<-geo2%>%inner_join(dths)
View(dths2)
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
?read.csv
dths<-read.csv("Data/co_opioid_death_1418.csv",stringsAsFactors = FALSE)
dths$GEOID<-paste("0",as.character(dths$tractid),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
dthloc<-as.data.frame(dths2[,6])[,1:2]
dthloc2<-data.frame(matrix(unlist(dthloc[1]), nrow=nrow(dthloc), byrow=T))
dthloc2$id<-dths2$GEOID
View(dths2)
#making a map of deaths
dthsloc2$lat <- dthsloc2$centroid[[1]]
#making a map of deaths
dthloc2$lat <- dthloc2$centroid[[1]]
dthloc2$long <- dthloc2$centroid[[2]]
View(dthloc2)
dths<-read.csv("Data/co_opioid_death_1418.csv",stringsAsFactors = FALSE)
dths$GEOID<-paste("0",as.character(dths$tractid),sep="")
dths2<-geo2%>%inner_join(dths)%>%filter(d>0)
dthloc<-as.data.frame(dths2[,6])[,1:2]
dthloc2<-data.frame(matrix(unlist(dthloc[1]), nrow=nrow(dthloc), byrow=T))
dthloc2$id<-dths2$GEOID
deathcount<-nrow(dths2) #Indicator for Number of Records
#making a map of deaths
dths2$lat <- dthloc2$centroid[[1]]
View(dths2)
#making a map of deaths
dths2$lat <- dthloc2$centroids[[1]]
dths2$long <- dthloc2$centroid[[2]]
dthloc2$centroids
dths2$centroids
#making a map of deaths
dths2$lat <- dths2$centroids[[1]]
View(dths2)
list(dths2$centroids)
typeof(dthloc2$centroids)
#making a map of deaths
dths2$lat <- stat_sf_coordinates(dths2$centroids)
ggplot(data = dths2$centroids) +
geom_sf()
ggmap(m) +
geom_sf(data = dths2$centroids)
m <- get_stamenmap(getbb("Colorado"),source="stamen",maptype = "toner",zoom=7)
ggmap(m) +
geom_sf(data = dths2$centroids)
ggmap(m) +
geom_sf(aes(data = dths2$centroids))
?sf_coordinates
??sf_coordiantes
ggmap(m) +
stat_sf_coordinates(aes(data = dths2$centroids))
ggmap(m) +
stat_sf_coordinates(data = dths2$centroids)
ggmap(m) +
geom_sf(data = dths2$centroids)
ggplot()+
geom_sf(data = dths2$centroids)
